

//@skip-check module-structure-top-region
//@skip-check module-structure-top-region
//@skip-check module-structure-top-region
//@skip-check module-structure-top-region
//@skip-check module-structure-top-region
//@skip-check module-structure-top-region
//@skip-check module-structure-top-region
//@skip-check module-structure-top-region
//@skip-check module-structure-top-region
//@skip-check module-structure-top-region
//@skip-check module-structure-top-region
//@skip-check module-structure-top-region
//@skip-check module-structure-top-region
//@skip-check module-structure-top-region
#Область ПрограммныйИнтрефейс
//@skip-check module-accessibility-at-client
//@skip-check module-structure-event-regions
Процедура ОбработкаПроведения(Отказ,Режим)//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора, внесенные вручную данные будут утеряны!

	Движения.АктивныеПосещения.Записывать = Истина;
	Движения.Записать();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	АктивныеПосещенияОстатки.ВидАттракциона,
	|	АктивныеПосещенияОстатки.КоличествоПосещенийОстаток
	|ИЗ
	|	РегистрНакопления.АктивныеПосещения.Остатки(, Основание = &Основание) КАК АктивныеПосещенияОстатки";
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОсталосьПосещений = 0;
	ВидАттракционаАбонемента = Неопределено;
	
	Если Выборка.Следующий() Тогда
		
		ОсталосьПосещений = Выборка.КоличествоПосещенийОстаток;
		ВидАттракционаАбонемента = Выборка.ВидАттракциона;
		
	КонецЕсли;
	
	Если ОсталосьПосещений < 1 Тогда
		
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "В билете не осталось посещений!";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Поле = "Основание";
		Сообщение.Сообщить();
	КонецЕсли;
	
	ВидАттракционаДокумента = ПолучитьВидАттракциона(Аттракцион);
	
	Если  ЗначениеЗаполнено(ВидАттракционаАбонемента) И ВидАттракционаДокумента <>  ВидАттракционаАбонемента Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Билет не подходит для посещения этого аттракциона!";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Поле = "Основание";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
		
	КонецЕсли;

	// регистр АктивныеПосещения
	Движения.АктивныеПосещения.Записывать = Истина;
	Движение = Движения.АктивныеПосещения.Добавить();
	Движение.Период = Дата;
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.ВидАттракциона = ВидАттракционаАбонемента;
	Движение.Основание = Основание;
	Движение.КоличествоПосещений = 1;
	
	// регистр ПосещенияАттракционов
	Движения.ПосещенияАттракционов.Записывать = Истина;
	Движение = Движения.ПосещенияАттракционов.Добавить();
	Движение.Период = Дата;
	Движение.Аттракцион = Аттракцион;
	Движение.Клиент = КлиентПоОснованию();
	Движение.Количество = 1;
	
	
	 
КонецПроцедуры
#КонецОбласти	
	
//@skip-check module-structure-method-in-regions
//@skip-check module-accessibility-at-client
Функция ПолучитьВидАттракциона(Номенклатура)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Аттракционы.ВидАттракциона
	|ИЗ
	|	Справочник.Аттракционы КАК Аттракционы
	|ГДЕ
	|	Аттракционы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Аттракцион);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ВидАттракциона;
	
КонецФункции 



//@skip-check module-structure-method-in-regions
//@skip-check module-accessibility-at-client
Функция КлиентПоОснованию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродажаБилетов.Клиент
		|ИЗ
		|	Документ.ПродажаБилетов КАК ПродажаБилетов
		|ГДЕ
		|	ПродажаБилетов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Клиент;
		
КонецФункции