
#Область СлужебныеПроцедурыИФункции

//Сгенерировать данные
//@skip-check module-accessibility-at-client
//@skip-check module-accessibility-at-client
Процедура СгенерироватьДанные() Экспорт
	
	ТекстМакета = ПолучитьМакет("СлучайныеФИО").ПолучитьТекст();
	
	СписокПосетителей = СтрРазделить(ТекстМакета, Символы.ПС);
	КоличествоПосетителей = СписокПосетителей.Количество();
	СписокАттракционов = СписокАттракционов();
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	Курсор = Период.ДатаНачала;
	
	Пока Курсор < Период.ДатаОкончания Цикл
		
		Если ДеньНедели(Курсор) = 1 Тогда
			Курсор = Курсор + 86400;
			Продолжить;			
		КонецЕсли;
		
		КоэффициентПосетителей = 1;
		
		Если ДеньНедели(Курсор) >= 6 Тогда
			КоэффициентПосетителей = 1.5;			
		КонецЕсли;
		
		КоличествоПосетителей = ГСЧ.СлучайноеЧисло(10, 30) * КоэффициентПосетителей;
		
		Для НомерПосетителя = 1 По КоличествоПосетителей Цикл
			
			ИндексСлучайногоПосетителя = ГСЧ.СлучайноеЧисло(0, 99);
			
			ФИОПосетителя = СписокПосетителей[ИндексСлучайногоПосетителя];
			
			Посетитель = ПолучитьПосетителя(ФИОПосетителя, ГСЧ);
			
			//@skip-check query-in-loop
			СформироватьПосещениеПосетителя(Посетитель, Курсор, СписокАттракционов, ГСЧ);
			
			
		КонецЦикла;
		
		
		
	КонецЦикла;

КонецПроцедуры

//@skip-check module-accessibility-at-client
Функция СлучайныйТелефон(ГСЧ)
	
	Результат = "+79";
	
	Для Сч = 1 По 9 Цикл
		
		Результат = Результат + ГСЧ.СлучайноеЧисло(0, 9);
		
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//@skip-check module-accessibility-at-client
Функция ПолучитьПосетителя(ФИОПосетителя, ГСЧ)
	
	Результат = Справочники.Клиенты.НайтиПоНаименованию(ФИОПосетителя, Истина);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		СпрОбъект = Справочники.Клиенты.СоздатьЭлемент();
		СпрОбъект.Заполнить(Неопределено);
		СпрОбъект.Наименование = ФИОПосетителя;
		СпрОбъект.Телефон = СлучайныйТелефон(ГСЧ);
		Если НЕ СпрОбъект.ПроверитьЗаполнение() Тогда
			ВызватьИсключение "Ошибка создания клиента";			
		КонецЕсли;
		СпрОбъект.Записать();
		Результат = СпрОбъект.Ссылка;				
	КонецЕсли;
	
	Возврат Результат;
	
	
КонецФункции



// Сформировать посещение посетителя.
// 
// Параметры:
//  Посетитель - СправочникСсылка.Клиенты - Посетитель
//  ДатаПосещения - Дата
//  СписокАттракционов - Массив Из СправочникСсылка.Аттракционы
//  ГСЧ - Неопределено
//@skip-check module-accessibility-at-client
Процедура СформироватьПосещениеПосетителя(Посетитель, ДатаПосещения, СписокАттракционов, ГСЧ = Неопределено)
	
	Если ГСЧ = Неопределено Тогда
		
		ГСЧ = Новый ГенераторСлучайныхЧисел();
		
	КонецЕсли;
	
	КоличествоАттракционов = ГСЧ.СлучайноеЧисло(1, 7);
	
	Для Сч = 1 По КоличествоАттракционов Цикл
		
		ИндексАттракциона = ГСЧ.СлучайноеЧисло(0, СписокАттракционов.ВГраница());
		Аттракцион = СписокАттракционов[ИндексАттракциона];
		
		//@skip-check query-in-loop
		ОснованиеПосещения = ТекущееОснование(Посетитель, Аттракцион);
		
		Если НЕ ЗначениеЗаполнено(ОснованиеПосещения) Тогда
			//@skip-check query-in-loop
			ОснованиеПосещения = КупитьБилет(Посетитель, Аттракцион, ДатаПосещения, ГСЧ);
			
		КонецЕсли;
		
		ЗарегистрироватьПосещение(ОснованиеПосещения, Аттракцион, ДатаПосещения);
		
		
	КонецЦикла;
	
КонецПроцедуры

//@skip-check module-accessibility-at-client
Процедура ЗарегистрироватьПосещение(ОснованиеПосещения, Аттракцион, ДатаПосещения)
	
	ДокОбъект = Документы.ПосещениеАттракционов.СоздатьДокумент();
	ДокОбъект.Заполнить(Неопределено);
	ДокОбъект.Дата = ДатаПосещения;
	ДокОбъект.Основание = ОснованиеПосещения;
	ДокОбъект.Аттракцион = Аттракцион;
	
	Если НЕ ДокОбъект.ПроверитьЗаполнение()Тогда
		ВызватьИсключение "Не удалось записать посещение";		
	КонецЕсли; 
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);	
	
КонецПроцедуры

//@skip-check module-accessibility-at-client
Функция СписокАттракционов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Аттракционы.Ссылка
		|ИЗ
		|	Справочник.Аттракционы КАК Аттракционы";
		
		
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");	
	
КонецФункции

//@skip-check module-accessibility-at-client
Функция ТекущееОснование(Посетитель, Аттракцион)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктивныеПосещенияОстатки.Основание КАК Основание
		|ИЗ
		|	РегистрНакопления.АктивныеПосещения.Остатки(, Основание.Клиент = &Посетитель
		|	И ВидАттракциона В
		|		(ВЫБРАТЬ
		|			Аттракционы.ВидАттракциона
		|		ИЗ
		|			Справочник.Аттракционы КАК Аттракционы
		|		ГДЕ
		|			Аттракционы.Ссылка = &Аттракцион)) КАК АктивныеПосещенияОстатки
		|ГДЕ
		|	АктивныеПосещенияОстатки.КоличествоПосещенийОстаток > 0";
		
		Запрос.УстановитьПараметр("Посетитель", Посетитель);
		Запрос.УстановитьПараметр("Аттракцион", Аттракцион);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Основание;
		КонецЕсли;
		
		Возврат Неопределено;		
	
КонецФункции

//@skip-check module-accessibility-at-client
Функция КупитьБилет(Посетитель, Аттракцион, ДатаПосещения, ГСЧ)
	
	ДоступнаяНоменклатура = ДоступнаяНоменклатура(Аттракцион);
	
	ИндексНоменклатуры = ГСЧ.СлучайноеЧисло(0, ДоступнаяНоменклатура.ВГраница());
	
	Номенклатура = ДоступнаяНоменклатура[ИндексНоменклатуры];
	
	ДокОбъект = Документы.ПродажаБилетов.СоздатьДокумент();
	ДокОбъект.Дата = ДатаПосещения;
	ДокОбъект.Заполнить(Неопределено);
	ДокОбъект.Клиент = Посетитель;
	
	СтрокаТЧ = ДокОбъект.ПозицииПродажи.Добавить();
	СтрокаТЧ.Номенклатура = Номенклатура;
	СтрокаТЧ.Количество = 1;
	СтрокаТЧ.Цена = РегистрыСведений.ЦеныНоменклатуры.ЦенаНоменклатуры(Номенклатура);
	СтрокаТЧ.Сумма = СтрокаТЧ.Цена;
	
	ДокОбъект.СуммаДокумента = ДокОбъект.ПозицииПродажи.Итог("Сумма");
	
	Если НЕ ДокОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение "Ошибка создания продажи"		
	КонецЕсли;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	
	Возврат  ДокОбъект.Ссылка;
		
	

КонецФункции

//@skip-check module-accessibility-at-client
Функция ДоступнаяНоменклатура(Аттракцион)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ВидАттракциона В
		|		(ВЫБРАТЬ
		|			Аттракционы.ВидАттракциона
		|		ИЗ
		|			Справочник.Аттракционы КАК Аттракционы
		|		ГДЕ
		|			Аттракционы.Ссылка = &Ссылка)";
		
	Запрос.УстановитьПараметр("Ссылка", Аттракцион);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		
КонецФункции

#КонецОбласти

